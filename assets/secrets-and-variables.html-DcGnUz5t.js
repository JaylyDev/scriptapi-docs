import{_ as s,c as a,a as e,o as t}from"./app-DeYZOSwV.js";const p={};function o(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="secrets-and-variables" tabindex="-1"><a class="header-anchor" href="#secrets-and-variables"><span>Secrets and Variables</span></a></h1><p>Guides related to configuration of variables and secrets in JSON files in the Bedrock Dedicated Server folder via the <code>@minecraft/server-admin</code> module.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>This feature is only available to <a href="https://www.minecraft.net/en-us/download/server/bedrock" target="_blank" rel="noopener noreferrer">Bedrock Dedicated Servers</a>, and it cannot be used on Minecraft clients.</p></div><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables"><span>Variables</span></a></h2><p>Variables are properties that has been configured in a dedicated server configuration JSON file.</p><h3 id="storing-variables" tabindex="-1"><a class="header-anchor" href="#storing-variables"><span>Storing Variables</span></a></h3><p>JSON format for <code>variables.json</code> is <code>Record&lt;string, any&gt;</code>. The file is located in <code>config/&lt;pack_id&gt;/variables.json</code>.</p><div class="language-jsonc line-numbers-mode" data-highlighter="prismjs" data-ext="jsonc" data-title="jsonc"><pre><code><span class="line">{</span>
<span class="line">  &quot;myVariable&quot;: &quot;Foo bar&quot;, // string to any</span>
<span class="line">  &quot;myVariable2&quot;: {</span>
<span class="line">    &quot;bar&quot;: &quot;baz&quot;</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loading-variables" tabindex="-1"><a class="header-anchor" href="#loading-variables"><span>Loading Variables</span></a></h3><p>To load the variables in Minecraft, first add <code>@minecraft/server-admin</code> module to <code>manifest.json</code> dependency:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;module_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@minecraft/server-admin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0-beta&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then get the value of variables from the API module through <code>varaibles.get()</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> variables <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@minecraft/server-admin&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A list of available, configured server variables.</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>variables<span class="token punctuation">.</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Returns the value of variable that has been configured in a dedicated server configuration JSON file.</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;myVariables&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Foo bar</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;myVariable2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &quot;bar&quot;: &quot;baz&quot; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="secrets" tabindex="-1"><a class="header-anchor" href="#secrets"><span>Secrets</span></a></h2><p>Secrets defined in dedicated server configuration, it&#39;s value is not available to view in script environment.</p><h3 id="storing-secrets" tabindex="-1"><a class="header-anchor" href="#storing-secrets"><span>Storing Secrets</span></a></h3><p>JSON format for <code>secrets.json</code> is <code>Record&lt;string, string&gt;</code>:</p><div class="language-jsonc line-numbers-mode" data-highlighter="prismjs" data-ext="jsonc" data-title="jsonc"><pre><code><span class="line">{</span>
<span class="line">  &quot;secretToken&quot;: &quot;jayly123&quot; // string to string only</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The file is located in <code>config/&lt;pack_id&gt;/secrets.json</code>.</p><h3 id="loading-secrets" tabindex="-1"><a class="header-anchor" href="#loading-secrets"><span>Loading Secrets</span></a></h3><p>Secrets are used in HTTP requests via <code>@minecraft/server-net</code>.</p><p>To load the secrets in Minecraft, first add <code>@minecraft/server-admin</code> and <code>@minecraft/server-net</code> module to <code>manifest.json</code> dependency:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;module_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@minecraft/server-admin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0-beta&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;module_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@minecraft/server-net&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0-beta&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then get the value of variables from the API module through <code>secrets.get()</code>.</p><h3 id="discord-api-example-usage" tabindex="-1"><a class="header-anchor" href="#discord-api-example-usage"><span>Discord API Example Usage</span></a></h3><p>I figured a lot of users here use Discord, so why not make Minecraft sends a message to Discord using your Discord bot.</p><p>The following code below sends a message to a Discord channel from Minecraft, using Discord HTTP API.</p><ol><li>Imports all the neccessary variables and methods.</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> secrets<span class="token punctuation">,</span> SecretString<span class="token punctuation">,</span> variables <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@minecraft/server-admin&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  http<span class="token punctuation">,</span></span>
<span class="line">  HttpHeader<span class="token punctuation">,</span></span>
<span class="line">  HttpRequest<span class="token punctuation">,</span></span>
<span class="line">  HttpRequestMethod<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@minecraft/server-net&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Retrieves all neccessary variables and secrets from JSON files, in your Bedrock Dedicated Server folder.</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Gets bot token, in format &quot;BOT &lt;token&gt;&quot;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">BOT_TOKEN</span> <span class="token operator">=</span> secrets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;BOT_TOKEN&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> SecretString<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Retrives Discord&#39;s API base URL</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">BASE_URL</span><span class="token operator">:</span> string <span class="token operator">=</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;BASE_URL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Add-On homepage URL - required in User Agent in HTTP requests to Discord APIs</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">HOMEPAGE</span><span class="token operator">:</span> string <span class="token operator">=</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;HOMEPAGE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Add-On version - required in User Agent in HTTP requests to Discord APIs</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">VERSION</span><span class="token operator">:</span> string <span class="token operator">=</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;VERSION&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Channel ID</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">channelId</span><span class="token operator">:</span> string <span class="token operator">=</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;CHANNEL_ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// User agent</span></span>
<span class="line"><span class="token keyword">const</span> UserAgent <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">agent</span><span class="token operator">:</span> <span class="token string">&quot;cpprestsdk&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&quot;2.9.0&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Response status</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token literal-property property">successResponseStatus</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Variable definitions:</p><ul><li><code>BOT_TOKEN</code>: Discord&#39;s bot token. Example: <code>BOT XXXXXXXXXXXXXXXX</code></li><li><code>BASE_URL</code>: Discord&#39;s API base URL, like <code>https://discord.com/api/v{version_number}</code><div class="hint-container info"><p class="hint-container-title">Info</p><p>Please check <a href="https://discord.com/developers/docs/reference#api-versioning-api-versions" target="_blank" rel="noopener noreferrer">Discord&#39;s API Reference</a> for a list of available API Versions.</p></div></li><li><code>HOMEPAGE</code>: Your project&#39;s homepage. Example: <code>https://jaylydev.github.io</code></li><li><code>VERSION</code>: Your project&#39;s version. Example: <code>0.1.0</code></li><li><code>channelId</code>: Discord&#39;s channel ID to send the message to.</li><li><code>UserAgent</code>: A computer program representing a person. We&#39;re using Minecraft&#39;s HTTP user agent in this example.</li><li><code>successResponseStatus</code>: List of success HTTP response status sent by Discord API.</li></ul><ol start="3"><li>Implement a HTTP request function that sends a request to Discord&#39;s API<div class="hint-container info"><p class="hint-container-title">Info</p><p>Please check <a href="https://discord.com/developers/docs/" target="_blank" rel="noopener noreferrer">Discord&#39;s API Reference</a> for more infomation.</p></div></li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span></span>
<span class="line">  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  method<span class="token operator">:</span> HttpRequestMethod<span class="token punctuation">,</span></span>
<span class="line">  body<span class="token operator">?</span><span class="token operator">:</span> object</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Parameters:</p><ul><li><code>url</code>: Discord API endpoint.</li><li><code>method</code>: HTTP request method</li><li><code>body</code>: Request body</li></ul><p>Returns:</p><ul><li><code>Promise&lt;string&gt;</code>: Raw HTTP response</li></ul><ol start="4"><li>Simple wrapper to send a message to Discord</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> message <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Request object</span></span>
<span class="line">    <span class="token keyword">const</span> requestOptions<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      content<span class="token operator">:</span> message<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/channels/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>channelId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/messages</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> method<span class="token punctuation">,</span> requestOptions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Entire script example and configuration are shown below:</p><details class="hint-container details"><summary>sendRequest.ts</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> secrets<span class="token punctuation">,</span> SecretString<span class="token punctuation">,</span> variables <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@minecraft/server-admin&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">  http<span class="token punctuation">,</span></span>
<span class="line">  HttpHeader<span class="token punctuation">,</span></span>
<span class="line">  HttpRequest<span class="token punctuation">,</span></span>
<span class="line">  HttpRequestMethod<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@minecraft/server-net&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">BOT_TOKEN</span> <span class="token operator">=</span> secrets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;BOT_TOKEN&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> SecretString<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">BASE_URL</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;BASE_URL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">HOMEPAGE</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;HOMEPAGE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">VERSION</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;VERSION&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> channelId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;CHANNEL_ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> UserAgent <span class="token operator">=</span> <span class="token punctuation">{</span> agent<span class="token operator">:</span> <span class="token string">&quot;cpprestsdk&quot;</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token string">&quot;2.9.0&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> successResponseStatus<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span></span>
<span class="line">  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  method<span class="token operator">:</span> HttpRequestMethod<span class="token punctuation">,</span></span>
<span class="line">  body<span class="token operator">?</span><span class="token operator">:</span> object</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Define the base URL and combine it with a specific endpoint URL</span></span>
<span class="line">  <span class="token keyword">const</span> fetchUrl <span class="token operator">=</span> <span class="token constant">BASE_URL</span> <span class="token operator">+</span> url<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Create a new HTTP request object using the fetch URL</span></span>
<span class="line">  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span>fetchUrl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Define headers to include with the request</span></span>
<span class="line">  <span class="token keyword">const</span> headers<span class="token operator">:</span> HttpHeader<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token comment">// Authorization header using a bot token for authentication</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token constant">BOT_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// User-Agent header with bot information (required for Discord API requests)</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">DiscordBot (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">HOMEPAGE</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">VERSION</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>UserAgent<span class="token punctuation">.</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>UserAgent<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Specify the content type as JSON for the request body</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Specify the accepted encoding format for the response</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Encoding&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Specify the acceptable response format</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Assign the defined headers to the request options</span></span>
<span class="line">  options<span class="token punctuation">.</span>headers <span class="token operator">=</span> headers<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Set the HTTP method (e.g., GET, POST, DELETE, etc.)</span></span>
<span class="line">  options<span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// If the request body is an object, stringify it to JSON format</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> body <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> options<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Perform the HTTP request and await the response</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Check if the response status is considered a success</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>successResponseStatus<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// If the response is not successful, log an error message</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>uri<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Response: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span></span>
<span class="line">        response<span class="token punctuation">.</span>body</span>
<span class="line">      <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Throw an error to signal the failure</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>uri<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// If successful, log the HTTP method and URI</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span>uri<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Return the response body</span></span>
<span class="line">    <span class="token keyword">return</span> response<span class="token punctuation">.</span>body<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> message <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> requestOptions<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      content<span class="token operator">:</span> message<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/channels/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>channelId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/messages</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> method<span class="token punctuation">,</span> requestOptions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>config/&lt;pack_id&gt;/variables.json</summary><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;BASE_URL&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://discord.com/api/v{version_number}&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;HOMEPAGE&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://jaylydev.github.io/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;VERSION&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.1.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;CHANNEL_ID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;000000000000000000&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>config/&lt;pack_id&gt;/secrets.json</summary><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;BOT_TOKEN&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BOT {token}&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,45)]))}const c=s(p,[["render",o],["__file","secrets-and-variables.html.vue"]]),r=JSON.parse('{"path":"/features/secrets-and-variables.html","title":"Secrets and Variables","lang":"en-US","frontmatter":{"title":"Secrets and Variables","description":"Guides related to configuration of variables and secrets in JSON files in the Bedrock Dedicated Server folder via the @minecraft/server-admin module."},"headers":[{"level":2,"title":"Variables","slug":"variables","link":"#variables","children":[{"level":3,"title":"Storing Variables","slug":"storing-variables","link":"#storing-variables","children":[]},{"level":3,"title":"Loading Variables","slug":"loading-variables","link":"#loading-variables","children":[]}]},{"level":2,"title":"Secrets","slug":"secrets","link":"#secrets","children":[{"level":3,"title":"Storing Secrets","slug":"storing-secrets","link":"#storing-secrets","children":[]},{"level":3,"title":"Loading Secrets","slug":"loading-secrets","link":"#loading-secrets","children":[]},{"level":3,"title":"Discord API Example Usage","slug":"discord-api-example-usage","link":"#discord-api-example-usage","children":[]}]}],"git":{"updatedTime":1740510533000,"contributors":[{"name":"Jayly","email":"65847850+JaylyDev@users.noreply.github.com","commits":1,"url":"https://github.com/Jayly"}]},"filePathRelative":"features/secrets-and-variables.md"}');export{c as comp,r as data};
