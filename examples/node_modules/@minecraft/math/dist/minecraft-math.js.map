{
  "version": 3,
  "sources": ["../src/general/clamp.ts", "../src/vector3/coreHelpers.ts", "../src/vector3/vectorWrapper.ts"],
  "sourcesContent": ["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Clamps the passed in number to the passed in min and max values.\n *\n * @public\n */\nexport function clampNumber(val: number, min: number, max: number): number {\n    return Math.min(Math.max(val, min), max);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Vector2, Vector3 } from '@minecraft/server';\nimport { clampNumber } from '../general/clamp';\n\n/**\n * Utilities operating on Vector3 objects. All methods are static and do not modify the input objects.\n *\n * @public\n */\nexport class Vector3Utils {\n    /**\n     * equals\n     *\n     * Check the equality of two vectors\n     */\n    static equals(v1: Vector3, v2: Vector3): boolean {\n        return v1.x === v2.x && v1.y === v2.y && v1.z === v2.z;\n    }\n\n    /**\n     * add\n     *\n     * Add two vectors to produce a new vector\n     */\n    static add(v1: Vector3, v2: Vector3): Vector3 {\n        return { x: v1.x + v2.x, y: v1.y + v2.y, z: v1.z + v2.z };\n    }\n\n    /**\n     * subtract\n     *\n     * Subtract two vectors to produce a new vector (v1-v2)\n     */\n    static subtract(v1: Vector3, v2: Vector3): Vector3 {\n        return { x: v1.x - v2.x, y: v1.y - v2.y, z: v1.z - v2.z };\n    }\n\n    /** scale\n     *\n     * Multiple all entries in a vector by a single scalar value producing a new vector\n     */\n    static scale(v1: Vector3, scale: number): Vector3 {\n        return { x: v1.x * scale, y: v1.y * scale, z: v1.z * scale };\n    }\n\n    /**\n     * dot\n     *\n     * Calculate the dot product of two vectors\n     */\n    static dot(a: Vector3, b: Vector3): number {\n        return a.x * b.x + a.y * b.y + a.z * b.z;\n    }\n\n    /**\n     * cross\n     *\n     * Calculate the cross product of two vectors. Returns a new vector.\n     */\n    static cross(a: Vector3, b: Vector3): Vector3 {\n        return {\n            x: a.y * b.z - a.z * b.y,\n            y: a.z * b.x - a.x * b.z,\n            z: a.x * b.y - a.y * b.x,\n        };\n    }\n\n    /**\n     * magnitude\n     *\n     * The magnitude of a vector\n     */\n    static magnitude(v: Vector3): number {\n        return Math.sqrt(v.x ** 2 + v.y ** 2 + v.z ** 2);\n    }\n\n    /**\n     * distance\n     *\n     * Calculate the distance between two vectors\n     */\n    static distance(a: Vector3, b: Vector3): number {\n        return Vector3Utils.magnitude(Vector3Utils.subtract(a, b));\n    }\n\n    /**\n     * normalize\n     *\n     * Takes a vector 3 and normalizes it to a unit vector\n     */\n    static normalize(v: Vector3): Vector3 {\n        const mag = Vector3Utils.magnitude(v);\n        return { x: v.x / mag, y: v.y / mag, z: v.z / mag };\n    }\n\n    /**\n     * floor\n     *\n     * Floor the components of a vector to produce a new vector\n     */\n    static floor(v: Vector3): Vector3 {\n        return { x: Math.floor(v.x), y: Math.floor(v.y), z: Math.floor(v.z) };\n    }\n\n    /**\n     * toString\n     *\n     * Create a string representation of a vector3\n     */\n    static toString(v: Vector3, options?: { decimals?: number; delimiter?: string }): string {\n        const decimals = options?.decimals ?? 2;\n        const str: string[] = [v.x.toFixed(decimals), v.y.toFixed(decimals), v.z.toFixed(decimals)];\n        return str.join(options?.delimiter ?? ', ');\n    }\n\n    /**\n     * clamp\n     *\n     * Clamps the components of a vector to limits to produce a new vector\n     */\n    static clamp(\n        v: Vector3,\n        limits?: {\n            min?: Partial<Vector3>;\n            max?: Partial<Vector3>;\n        }\n    ): Vector3 {\n        return {\n            x: clampNumber(v.x, limits?.min?.x ?? Number.MIN_SAFE_INTEGER, limits?.max?.x ?? Number.MAX_SAFE_INTEGER),\n            y: clampNumber(v.y, limits?.min?.y ?? Number.MIN_SAFE_INTEGER, limits?.max?.y ?? Number.MAX_SAFE_INTEGER),\n            z: clampNumber(v.z, limits?.min?.z ?? Number.MIN_SAFE_INTEGER, limits?.max?.z ?? Number.MAX_SAFE_INTEGER),\n        };\n    }\n\n    /**\n     * lerp\n     *\n     * Constructs a new vector using linear interpolation on each component from two vectors.\n     */\n    static lerp(a: Vector3, b: Vector3, t: number): Vector3 {\n        return {\n            x: a.x + (b.x - a.x) * t,\n            y: a.y + (b.y - a.y) * t,\n            z: a.z + (b.z - a.z) * t,\n        };\n    }\n\n    /**\n     * slerp\n     *\n     * Constructs a new vector using spherical linear interpolation on each component from two vectors.\n     */\n    static slerp(a: Vector3, b: Vector3, t: number): Vector3 {\n        const theta = Math.acos(Vector3Utils.dot(a, b));\n        const sinTheta = Math.sin(theta);\n        const ta = Math.sin((1.0 - t) * theta) / sinTheta;\n        const tb = Math.sin(t * theta) / sinTheta;\n        return Vector3Utils.add(Vector3Utils.scale(a, ta), Vector3Utils.scale(b, tb));\n    }\n}\n\n/**\n * Utilities operating on Vector2 objects. All methods are static and do not modify the input objects.\n *\n * @public\n */\nexport class Vector2Utils {\n    /**\n     * toString\n     *\n     * Create a string representation of a vector2\n     */\n    static toString(v: Vector2, options?: { decimals?: number; delimiter?: string }): string {\n        const decimals = options?.decimals ?? 2;\n        const str: string[] = [v.x.toFixed(decimals), v.y.toFixed(decimals)];\n        return str.join(options?.delimiter ?? ', ');\n    }\n}\n\n/**\n * up\n *\n * A unit vector representing the world UP direction (0,1,0)\n *\n * @public\n */\nexport const VECTOR3_UP: Vector3 = { x: 0, y: 1, z: 0 };\n/**\n * down\n *\n * A unit vector representing the world DOWN direction (0,-1,0)\n *\n * @public\n */\nexport const VECTOR3_DOWN: Vector3 = { x: 0, y: -1, z: 0 };\n/**\n * left\n *\n * A unit vector representing the world LEFT direction (-1,0,0)\n *\n * @public\n */\nexport const VECTOR3_LEFT: Vector3 = { x: -1, y: 0, z: 0 };\n/**\n * right\n *\n * A unit vector representing the world RIGHT direction (1,0,0)\n *\n * @public\n */\nexport const VECTOR3_RIGHT: Vector3 = { x: 1, y: 0, z: 0 };\n/**\n * forward\n *\n * A unit vector representing the world FORWARD direction (0,0,1)\n *\n * @public\n */\nexport const VECTOR3_FORWARD: Vector3 = { x: 0, y: 0, z: 1 };\n/**\n * back\n *\n * A unit vector representing the world BACK direction (0,0,-1)\n *\n * @public\n */\nexport const VECTOR3_BACK: Vector3 = { x: 0, y: 0, z: -1 };\n/**\n * one\n *\n * A unit vector representing the value of 1 in all directions (1,1,1)\n *\n * @public\n */\nexport const VECTOR3_ONE: Vector3 = { x: 1, y: 1, z: 1 };\n/**\n * zero\n *\n * A unit vector representing the value of 0 in all directions (0,0,0)\n *\n * @public\n */\nexport const VECTOR3_ZERO: Vector3 = { x: 0, y: 0, z: 0 };\n/**\n * west\n *\n * A unit vector representing the world WEST direction (-1,0,0)\n *   (same as LEFT)\n *\n * @public\n */\nexport const VECTOR3_WEST: Vector3 = { x: -1, y: 0, z: 0 };\n/**\n * east\n *\n * A unit vector representing the world EAST direction (-1,0,0)\n *   (same as RIGHT)\n *\n * @public\n */\nexport const VECTOR3_EAST: Vector3 = { x: 1, y: 0, z: 0 };\n/**\n * north\n *\n * A unit vector representing the world NORTH direction (-1,0,0)\n *   (same as FORWARD)\n *\n * @public\n */\nexport const VECTOR3_NORTH: Vector3 = { x: 0, y: 0, z: 1 };\n/**\n * south\n *\n * A unit vector representing the world SOUTH direction (-1,0,0)\n *   (same as BACK)\n *\n * @public\n */\nexport const VECTOR3_SOUTH: Vector3 = { x: 0, y: 0, z: -1 };\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Vector2, Vector3 } from '@minecraft/server';\nimport { Vector2Utils, Vector3Utils } from './coreHelpers';\n\n/**\n * Vector3 wrapper class which can be used as a Vector3 for APIs on \\@minecraft/server which require a Vector,\n * but also contain additional helper methods. This is an alternative to using the core Vector 3 utility\n * methods directly, for those who prefer a more object-oriented approach. This version of the class is mutable\n * and changes state inline.\n *\n * For an immutable version of the build, use ImmutableVector3Builder.\n *\n * @public\n */\nexport class Vector3Builder implements Vector3 {\n    x: number;\n    y: number;\n    z: number;\n\n    constructor(vec: Vector3, arg?: never, arg2?: never);\n    constructor(x: number, y: number, z: number);\n    constructor(first: number | Vector3, y?: number, z?: number) {\n        if (typeof first === 'object') {\n            this.x = first.x;\n            this.y = first.y;\n            this.z = first.z;\n        } else {\n            this.x = first;\n            this.y = y ?? 0;\n            this.z = z ?? 0;\n        }\n    }\n\n    /**\n     * Assigns the values of the passed in vector to this vector. Returns itself.\n     */\n    assign(vec: Vector3): this {\n        this.x = vec.x;\n        this.y = vec.y;\n        this.z = vec.z;\n        return this;\n    }\n\n    /**\n     * equals\n     *\n     * Check the equality of two vectors\n     */\n    equals(v: Vector3): boolean {\n        return Vector3Utils.equals(this, v);\n    }\n\n    /**\n     * add\n     *\n     * Adds the vector v to this, returning itself.\n     */\n    add(v: Vector3): this {\n        return this.assign(Vector3Utils.add(this, v));\n    }\n\n    /**\n     * subtract\n     *\n     * Subtracts the vector v from this, returning itself.\n     */\n    subtract(v: Vector3): this {\n        return this.assign(Vector3Utils.subtract(this, v));\n    }\n\n    /** scale\n     *\n     * Scales this by the passed in value, returning itself.\n     */\n    scale(val: number): this {\n        return this.assign(Vector3Utils.scale(this, val));\n    }\n\n    /**\n     * dot\n     *\n     * Computes the dot product of this and the passed in vector.\n     */\n    dot(vec: Vector3): number {\n        return Vector3Utils.dot(this, vec);\n    }\n\n    /**\n     * cross\n     *\n     * Computes the cross product of this and the passed in vector, returning itself.\n     */\n    cross(vec: Vector3): this {\n        return this.assign(Vector3Utils.cross(this, vec));\n    }\n\n    /**\n     * magnitude\n     *\n     * The magnitude of the vector\n     */\n    magnitude(): number {\n        return Vector3Utils.magnitude(this);\n    }\n\n    /**\n     * distance\n     *\n     * Calculate the distance between two vectors\n     */\n    distance(vec: Vector3): number {\n        return Vector3Utils.distance(this, vec);\n    }\n\n    /**\n     * normalize\n     *\n     * Normalizes this vector, returning itself.\n     */\n    normalize(): this {\n        return this.assign(Vector3Utils.normalize(this));\n    }\n\n    /**\n     * floor\n     *\n     * Floor the components of a vector to produce a new vector\n     */\n    floor(): this {\n        return this.assign(Vector3Utils.floor(this));\n    }\n\n    /**\n     * toString\n     *\n     * Create a string representation of a vector\n     */\n    toString(options?: { decimals?: number; delimiter?: string }): string {\n        return Vector3Utils.toString(this, options);\n    }\n\n    /**\n     * clamp\n     *\n     * Clamps the components of a vector to limits to produce a new vector\n     */\n    clamp(limits: { min?: Partial<Vector3>; max?: Partial<Vector3> }): this {\n        return this.assign(Vector3Utils.clamp(this, limits));\n    }\n\n    /**\n     * lerp\n     *\n     * Constructs a new vector using linear interpolation on each component from two vectors.\n     */\n    lerp(vec: Vector3, t: number): this {\n        return this.assign(Vector3Utils.lerp(this, vec, t));\n    }\n\n    /**\n     * slerp\n     *\n     * Constructs a new vector using spherical linear interpolation on each component from two vectors.\n     */\n    slerp(vec: Vector3, t: number): this {\n        return this.assign(Vector3Utils.slerp(this, vec, t));\n    }\n}\n\n/**\n * Vector2 wrapper class which can be used as a Vector2 for APIs on \\@minecraft/server which require a Vector2.\n * @public\n */\nexport class Vector2Builder implements Vector2 {\n    x: number;\n    y: number;\n\n    constructor(vec: Vector2, arg?: never);\n    constructor(x: number, y: number);\n    constructor(first: number | Vector2, y?: number) {\n        if (typeof first === 'object') {\n            this.x = first.x;\n            this.y = first.y;\n        } else {\n            this.x = first;\n            this.y = y ?? 0;\n        }\n    }\n\n    toString(options?: { decimals?: number; delimiter?: string }): string {\n        return Vector2Utils.toString(this, options);\n    }\n}\n"],
  "mappings": ";AAQM,SAAU,YAAY,KAAa,KAAa,KAAW;AAC7D,SAAO,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG;AAC3C;;;ACCM,IAAO,eAAP,MAAO,cAAY;;;;;;EAMrB,OAAO,OAAO,IAAa,IAAW;AAClC,WAAO,GAAG,MAAM,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,GAAG,MAAM,GAAG;EACzD;;;;;;EAOA,OAAO,IAAI,IAAa,IAAW;AAC/B,WAAO,EAAE,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,EAAC;EAC3D;;;;;;EAOA,OAAO,SAAS,IAAa,IAAW;AACpC,WAAO,EAAE,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,EAAC;EAC3D;;;;;EAMA,OAAO,MAAM,IAAa,OAAa;AACnC,WAAO,EAAE,GAAG,GAAG,IAAI,OAAO,GAAG,GAAG,IAAI,OAAO,GAAG,GAAG,IAAI,MAAK;EAC9D;;;;;;EAOA,OAAO,IAAI,GAAY,GAAU;AAC7B,WAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;EAC3C;;;;;;EAOA,OAAO,MAAM,GAAY,GAAU;AAC/B,WAAO;MACH,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;MACvB,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;MACvB,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;;EAE/B;;;;;;EAOA,OAAO,UAAU,GAAU;AACvB,WAAO,KAAK,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,CAAC;EACnD;;;;;;EAOA,OAAO,SAAS,GAAY,GAAU;AAClC,WAAO,cAAa,UAAU,cAAa,SAAS,GAAG,CAAC,CAAC;EAC7D;;;;;;EAOA,OAAO,UAAU,GAAU;AACvB,UAAM,MAAM,cAAa,UAAU,CAAC;AACpC,WAAO,EAAE,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,IAAI,IAAG;EACrD;;;;;;EAOA,OAAO,MAAM,GAAU;AACnB,WAAO,EAAE,GAAG,KAAK,MAAM,EAAE,CAAC,GAAG,GAAG,KAAK,MAAM,EAAE,CAAC,GAAG,GAAG,KAAK,MAAM,EAAE,CAAC,EAAC;EACvE;;;;;;EAOA,OAAO,SAAS,GAAY,SAAmD;AAC3E,UAAM,WAAW,SAAS,YAAY;AACtC,UAAM,MAAgB,CAAC,EAAE,EAAE,QAAQ,QAAQ,GAAG,EAAE,EAAE,QAAQ,QAAQ,GAAG,EAAE,EAAE,QAAQ,QAAQ,CAAC;AAC1F,WAAO,IAAI,KAAK,SAAS,aAAa,IAAI;EAC9C;;;;;;EAOA,OAAO,MACH,GACA,QAGC;AAED,WAAO;MACH,GAAG,YAAY,EAAE,GAAG,QAAQ,KAAK,KAAK,OAAO,kBAAkB,QAAQ,KAAK,KAAK,OAAO,gBAAgB;MACxG,GAAG,YAAY,EAAE,GAAG,QAAQ,KAAK,KAAK,OAAO,kBAAkB,QAAQ,KAAK,KAAK,OAAO,gBAAgB;MACxG,GAAG,YAAY,EAAE,GAAG,QAAQ,KAAK,KAAK,OAAO,kBAAkB,QAAQ,KAAK,KAAK,OAAO,gBAAgB;;EAEhH;;;;;;EAOA,OAAO,KAAK,GAAY,GAAY,GAAS;AACzC,WAAO;MACH,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK;MACvB,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK;MACvB,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK;;EAE/B;;;;;;EAOA,OAAO,MAAM,GAAY,GAAY,GAAS;AAC1C,UAAM,QAAQ,KAAK,KAAK,cAAa,IAAI,GAAG,CAAC,CAAC;AAC9C,UAAM,WAAW,KAAK,IAAI,KAAK;AAC/B,UAAM,KAAK,KAAK,KAAK,IAAM,KAAK,KAAK,IAAI;AACzC,UAAM,KAAK,KAAK,IAAI,IAAI,KAAK,IAAI;AACjC,WAAO,cAAa,IAAI,cAAa,MAAM,GAAG,EAAE,GAAG,cAAa,MAAM,GAAG,EAAE,CAAC;EAChF;;AAQE,IAAO,eAAP,MAAmB;;;;;;EAMrB,OAAO,SAAS,GAAY,SAAmD;AAC3E,UAAM,WAAW,SAAS,YAAY;AACtC,UAAM,MAAgB,CAAC,EAAE,EAAE,QAAQ,QAAQ,GAAG,EAAE,EAAE,QAAQ,QAAQ,CAAC;AACnE,WAAO,IAAI,KAAK,SAAS,aAAa,IAAI;EAC9C;;AAUG,IAAM,aAAsB,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAC;AAQ9C,IAAM,eAAwB,EAAE,GAAG,GAAG,GAAG,IAAI,GAAG,EAAC;AAQjD,IAAM,eAAwB,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,EAAC;AAQjD,IAAM,gBAAyB,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAC;AAQjD,IAAM,kBAA2B,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAC;AAQnD,IAAM,eAAwB,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAE;AAQjD,IAAM,cAAuB,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAC;AAQ/C,IAAM,eAAwB,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAC;AAShD,IAAM,eAAwB,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,EAAC;AASjD,IAAM,eAAwB,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAC;AAShD,IAAM,gBAAyB,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAC;AASjD,IAAM,gBAAyB,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAE;;;ACxQnD,IAAO,iBAAP,MAAqB;EAOvB,YAAY,OAAyB,GAAY,GAAU;AACvD,QAAI,OAAO,UAAU,UAAU;AAC3B,WAAK,IAAI,MAAM;AACf,WAAK,IAAI,MAAM;AACf,WAAK,IAAI,MAAM;IACnB,OAAO;AACH,WAAK,IAAI;AACT,WAAK,IAAI,KAAK;AACd,WAAK,IAAI,KAAK;IAClB;EACJ;;;;EAKA,OAAO,KAAY;AACf,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,WAAO;EACX;;;;;;EAOA,OAAO,GAAU;AACb,WAAO,aAAa,OAAO,MAAM,CAAC;EACtC;;;;;;EAOA,IAAI,GAAU;AACV,WAAO,KAAK,OAAO,aAAa,IAAI,MAAM,CAAC,CAAC;EAChD;;;;;;EAOA,SAAS,GAAU;AACf,WAAO,KAAK,OAAO,aAAa,SAAS,MAAM,CAAC,CAAC;EACrD;;;;;EAMA,MAAM,KAAW;AACb,WAAO,KAAK,OAAO,aAAa,MAAM,MAAM,GAAG,CAAC;EACpD;;;;;;EAOA,IAAI,KAAY;AACZ,WAAO,aAAa,IAAI,MAAM,GAAG;EACrC;;;;;;EAOA,MAAM,KAAY;AACd,WAAO,KAAK,OAAO,aAAa,MAAM,MAAM,GAAG,CAAC;EACpD;;;;;;EAOA,YAAS;AACL,WAAO,aAAa,UAAU,IAAI;EACtC;;;;;;EAOA,SAAS,KAAY;AACjB,WAAO,aAAa,SAAS,MAAM,GAAG;EAC1C;;;;;;EAOA,YAAS;AACL,WAAO,KAAK,OAAO,aAAa,UAAU,IAAI,CAAC;EACnD;;;;;;EAOA,QAAK;AACD,WAAO,KAAK,OAAO,aAAa,MAAM,IAAI,CAAC;EAC/C;;;;;;EAOA,SAAS,SAAmD;AACxD,WAAO,aAAa,SAAS,MAAM,OAAO;EAC9C;;;;;;EAOA,MAAM,QAA0D;AAC5D,WAAO,KAAK,OAAO,aAAa,MAAM,MAAM,MAAM,CAAC;EACvD;;;;;;EAOA,KAAK,KAAc,GAAS;AACxB,WAAO,KAAK,OAAO,aAAa,KAAK,MAAM,KAAK,CAAC,CAAC;EACtD;;;;;;EAOA,MAAM,KAAc,GAAS;AACzB,WAAO,KAAK,OAAO,aAAa,MAAM,MAAM,KAAK,CAAC,CAAC;EACvD;;AAOE,IAAO,iBAAP,MAAqB;EAMvB,YAAY,OAAyB,GAAU;AAC3C,QAAI,OAAO,UAAU,UAAU;AAC3B,WAAK,IAAI,MAAM;AACf,WAAK,IAAI,MAAM;IACnB,OAAO;AACH,WAAK,IAAI;AACT,WAAK,IAAI,KAAK;IAClB;EACJ;EAEA,SAAS,SAAmD;AACxD,WAAO,aAAa,SAAS,MAAM,OAAO;EAC9C;;",
  "names": []
}
